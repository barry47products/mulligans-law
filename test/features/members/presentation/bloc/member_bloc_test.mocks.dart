// Mocks generated by Mockito 5.4.6 from annotations
// in mulligans_law/test/features/members/presentation/bloc/member_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mulligans_law/features/members/domain/entities/member.dart'
    as _i2;
import 'package:mulligans_law/features/members/domain/usecases/get_society_members.dart'
    as _i3;
import 'package:mulligans_law/features/members/domain/usecases/join_society.dart'
    as _i5;
import 'package:mulligans_law/features/members/domain/usecases/leave_society.dart'
    as _i7;
import 'package:mulligans_law/features/members/domain/usecases/update_member_role.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMember_0 extends _i1.SmartFake implements _i2.Member {
  _FakeMember_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetSocietyMembers].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSocietyMembers extends _i1.Mock implements _i3.GetSocietyMembers {
  MockGetSocietyMembers() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Member>> call(String? societyId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [societyId]),
            returnValue: _i4.Future<List<_i2.Member>>.value(<_i2.Member>[]),
          )
          as _i4.Future<List<_i2.Member>>);
}

/// A class which mocks [JoinSociety].
///
/// See the documentation for Mockito's code generation for more information.
class MockJoinSociety extends _i1.Mock implements _i5.JoinSociety {
  MockJoinSociety() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Member> call({
    required String? userId,
    required String? societyId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #userId: userId,
              #societyId: societyId,
            }),
            returnValue: _i4.Future<_i2.Member>.value(
              _FakeMember_0(
                this,
                Invocation.method(#call, [], {
                  #userId: userId,
                  #societyId: societyId,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Member>);
}

/// A class which mocks [UpdateMemberRole].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateMemberRole extends _i1.Mock implements _i6.UpdateMemberRole {
  MockUpdateMemberRole() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Member> call({
    required String? memberId,
    required String? role,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {#memberId: memberId, #role: role}),
            returnValue: _i4.Future<_i2.Member>.value(
              _FakeMember_0(
                this,
                Invocation.method(#call, [], {
                  #memberId: memberId,
                  #role: role,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Member>);
}

/// A class which mocks [LeaveSociety].
///
/// See the documentation for Mockito's code generation for more information.
class MockLeaveSociety extends _i1.Mock implements _i7.LeaveSociety {
  MockLeaveSociety() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> call(String? memberId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [memberId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
