// Mocks generated by Mockito 5.4.6 from annotations
// in mulligans_law/test/features/societies/domain/usecases/create_society_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mulligans_law/features/societies/domain/entities/society.dart'
    as _i2;
import 'package:mulligans_law/features/societies/domain/repositories/society_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSociety_0 extends _i1.SmartFake implements _i2.Society {
  _FakeSociety_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SocietyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSocietyRepository extends _i1.Mock implements _i3.SocietyRepository {
  MockSocietyRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Society> createSociety({
    required String? name,
    String? description,
    String? logoUrl,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createSociety, [], {
              #name: name,
              #description: description,
              #logoUrl: logoUrl,
            }),
            returnValue: _i4.Future<_i2.Society>.value(
              _FakeSociety_0(
                this,
                Invocation.method(#createSociety, [], {
                  #name: name,
                  #description: description,
                  #logoUrl: logoUrl,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Society>);

  @override
  _i4.Future<List<_i2.Society>> getUserSocieties() =>
      (super.noSuchMethod(
            Invocation.method(#getUserSocieties, []),
            returnValue: _i4.Future<List<_i2.Society>>.value(<_i2.Society>[]),
          )
          as _i4.Future<List<_i2.Society>>);

  @override
  _i4.Future<_i2.Society> getSocietyById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getSocietyById, [id]),
            returnValue: _i4.Future<_i2.Society>.value(
              _FakeSociety_0(this, Invocation.method(#getSocietyById, [id])),
            ),
          )
          as _i4.Future<_i2.Society>);

  @override
  _i4.Future<_i2.Society> updateSociety({
    required String? id,
    String? name,
    String? description,
    String? logoUrl,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateSociety, [], {
              #id: id,
              #name: name,
              #description: description,
              #logoUrl: logoUrl,
            }),
            returnValue: _i4.Future<_i2.Society>.value(
              _FakeSociety_0(
                this,
                Invocation.method(#updateSociety, [], {
                  #id: id,
                  #name: name,
                  #description: description,
                  #logoUrl: logoUrl,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Society>);

  @override
  _i4.Future<void> deleteSociety(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteSociety, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Stream<List<_i2.Society>> watchUserSocieties() =>
      (super.noSuchMethod(
            Invocation.method(#watchUserSocieties, []),
            returnValue: _i4.Stream<List<_i2.Society>>.empty(),
          )
          as _i4.Stream<List<_i2.Society>>);
}
