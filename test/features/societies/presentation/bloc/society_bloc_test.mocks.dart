// Mocks generated by Mockito 5.4.6 from annotations
// in mulligans_law/test/features/societies/presentation/bloc/society_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mulligans_law/features/societies/domain/entities/society.dart'
    as _i2;
import 'package:mulligans_law/features/societies/domain/usecases/create_society.dart'
    as _i3;
import 'package:mulligans_law/features/societies/domain/usecases/get_public_societies.dart'
    as _i6;
import 'package:mulligans_law/features/societies/domain/usecases/get_user_societies.dart'
    as _i5;
import 'package:mulligans_law/features/societies/domain/usecases/update_society.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSociety_0 extends _i1.SmartFake implements _i2.Society {
  _FakeSociety_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CreateSociety].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateSociety extends _i1.Mock implements _i3.CreateSociety {
  MockCreateSociety() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Society> call({
    required String? userId,
    required String? name,
    String? description,
    String? logoUrl,
    bool? isPublic = false,
    bool? handicapLimitEnabled = false,
    int? handicapMin,
    int? handicapMax,
    String? location,
    String? rules,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #userId: userId,
              #name: name,
              #description: description,
              #logoUrl: logoUrl,
              #isPublic: isPublic,
              #handicapLimitEnabled: handicapLimitEnabled,
              #handicapMin: handicapMin,
              #handicapMax: handicapMax,
              #location: location,
              #rules: rules,
            }),
            returnValue: _i4.Future<_i2.Society>.value(
              _FakeSociety_0(
                this,
                Invocation.method(#call, [], {
                  #userId: userId,
                  #name: name,
                  #description: description,
                  #logoUrl: logoUrl,
                  #isPublic: isPublic,
                  #handicapLimitEnabled: handicapLimitEnabled,
                  #handicapMin: handicapMin,
                  #handicapMax: handicapMax,
                  #location: location,
                  #rules: rules,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Society>);
}

/// A class which mocks [GetUserSocieties].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserSocieties extends _i1.Mock implements _i5.GetUserSocieties {
  MockGetUserSocieties() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Society>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<List<_i2.Society>>.value(<_i2.Society>[]),
          )
          as _i4.Future<List<_i2.Society>>);
}

/// A class which mocks [GetPublicSocieties].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPublicSocieties extends _i1.Mock
    implements _i6.GetPublicSocieties {
  MockGetPublicSocieties() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Society>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<List<_i2.Society>>.value(<_i2.Society>[]),
          )
          as _i4.Future<List<_i2.Society>>);
}

/// A class which mocks [UpdateSociety].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateSociety extends _i1.Mock implements _i7.UpdateSociety {
  MockUpdateSociety() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Society> call({
    required String? id,
    String? name,
    String? description,
    String? logoUrl,
    bool? isPublic,
    bool? handicapLimitEnabled,
    int? handicapMin,
    int? handicapMax,
    String? location,
    String? rules,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #id: id,
              #name: name,
              #description: description,
              #logoUrl: logoUrl,
              #isPublic: isPublic,
              #handicapLimitEnabled: handicapLimitEnabled,
              #handicapMin: handicapMin,
              #handicapMax: handicapMax,
              #location: location,
              #rules: rules,
            }),
            returnValue: _i4.Future<_i2.Society>.value(
              _FakeSociety_0(
                this,
                Invocation.method(#call, [], {
                  #id: id,
                  #name: name,
                  #description: description,
                  #logoUrl: logoUrl,
                  #isPublic: isPublic,
                  #handicapLimitEnabled: handicapLimitEnabled,
                  #handicapMin: handicapMin,
                  #handicapMax: handicapMax,
                  #location: location,
                  #rules: rules,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Society>);
}
