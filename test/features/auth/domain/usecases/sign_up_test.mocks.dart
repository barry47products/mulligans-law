// Mocks generated by Mockito 5.4.6 from annotations
// in mulligans_law/test/features/auth/domain/usecases/sign_up_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mulligans_law/features/auth/domain/entities/auth_session.dart'
    as _i2;
import 'package:mulligans_law/features/auth/domain/entities/auth_user.dart'
    as _i3;
import 'package:mulligans_law/features/auth/domain/entities/user_profile.dart'
    as _i8;
import 'package:mulligans_law/features/auth/domain/repositories/auth_repository.dart'
    as _i6;
import 'package:mulligans_law/features/members/domain/entities/member.dart'
    as _i5;
import 'package:mulligans_law/features/members/domain/repositories/member_repository.dart'
    as _i9;
import 'package:mulligans_law/features/societies/domain/entities/society_stats.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthSession_0 extends _i1.SmartFake implements _i2.AuthSession {
  _FakeAuthSession_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAuthUser_1 extends _i1.SmartFake implements _i3.AuthUser {
  _FakeAuthUser_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSocietyStats_2 extends _i1.SmartFake implements _i4.SocietyStats {
  _FakeSocietyStats_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMember_3 extends _i1.SmartFake implements _i5.Member {
  _FakeMember_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i6.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Stream<_i3.AuthUser?> get authStateChanges =>
      (super.noSuchMethod(
            Invocation.getter(#authStateChanges),
            returnValue: _i7.Stream<_i3.AuthUser?>.empty(),
          )
          as _i7.Stream<_i3.AuthUser?>);

  @override
  _i7.Future<_i2.AuthSession> signInWithEmail({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmail, [], {
              #email: email,
              #password: password,
            }),
            returnValue: _i7.Future<_i2.AuthSession>.value(
              _FakeAuthSession_0(
                this,
                Invocation.method(#signInWithEmail, [], {
                  #email: email,
                  #password: password,
                }),
              ),
            ),
          )
          as _i7.Future<_i2.AuthSession>);

  @override
  _i7.Future<_i2.AuthSession> signUpWithEmail({
    required String? email,
    required String? password,
    String? name,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signUpWithEmail, [], {
              #email: email,
              #password: password,
              #name: name,
            }),
            returnValue: _i7.Future<_i2.AuthSession>.value(
              _FakeAuthSession_0(
                this,
                Invocation.method(#signUpWithEmail, [], {
                  #email: email,
                  #password: password,
                  #name: name,
                }),
              ),
            ),
          )
          as _i7.Future<_i2.AuthSession>);

  @override
  _i7.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i3.AuthUser?> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i7.Future<_i3.AuthUser?>.value(),
          )
          as _i7.Future<_i3.AuthUser?>);

  @override
  _i7.Future<_i2.AuthSession?> getCurrentSession() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentSession, []),
            returnValue: _i7.Future<_i2.AuthSession?>.value(),
          )
          as _i7.Future<_i2.AuthSession?>);

  @override
  _i7.Future<void> resetPassword({required String? email}) =>
      (super.noSuchMethod(
            Invocation.method(#resetPassword, [], {#email: email}),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i3.AuthUser> updateProfile({String? name, String? avatarUrl}) =>
      (super.noSuchMethod(
            Invocation.method(#updateProfile, [], {
              #name: name,
              #avatarUrl: avatarUrl,
            }),
            returnValue: _i7.Future<_i3.AuthUser>.value(
              _FakeAuthUser_1(
                this,
                Invocation.method(#updateProfile, [], {
                  #name: name,
                  #avatarUrl: avatarUrl,
                }),
              ),
            ),
          )
          as _i7.Future<_i3.AuthUser>);

  @override
  _i7.Future<List<_i8.UserProfile>> searchUsers({
    required String? query,
    int? limit = 20,
    String? excludeSocietyId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#searchUsers, [], {
              #query: query,
              #limit: limit,
              #excludeSocietyId: excludeSocietyId,
            }),
            returnValue: _i7.Future<List<_i8.UserProfile>>.value(
              <_i8.UserProfile>[],
            ),
          )
          as _i7.Future<List<_i8.UserProfile>>);
}

/// A class which mocks [MemberRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMemberRepository extends _i1.Mock implements _i9.MemberRepository {
  MockMemberRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i5.Member>> getSocietyMembers(String? societyId) =>
      (super.noSuchMethod(
            Invocation.method(#getSocietyMembers, [societyId]),
            returnValue: _i7.Future<List<_i5.Member>>.value(<_i5.Member>[]),
          )
          as _i7.Future<List<_i5.Member>>);

  @override
  _i7.Future<int> getMemberCount(String? societyId) =>
      (super.noSuchMethod(
            Invocation.method(#getMemberCount, [societyId]),
            returnValue: _i7.Future<int>.value(0),
          )
          as _i7.Future<int>);

  @override
  _i7.Future<_i4.SocietyStats> getSocietyStats(String? societyId) =>
      (super.noSuchMethod(
            Invocation.method(#getSocietyStats, [societyId]),
            returnValue: _i7.Future<_i4.SocietyStats>.value(
              _FakeSocietyStats_2(
                this,
                Invocation.method(#getSocietyStats, [societyId]),
              ),
            ),
          )
          as _i7.Future<_i4.SocietyStats>);

  @override
  _i7.Future<_i5.Member> addMember({
    required String? societyId,
    required String? userId,
    required String? name,
    required String? email,
    String? avatarUrl,
    required double? handicap,
    required String? role,
    String? status,
    DateTime? expiresAt,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addMember, [], {
              #societyId: societyId,
              #userId: userId,
              #name: name,
              #email: email,
              #avatarUrl: avatarUrl,
              #handicap: handicap,
              #role: role,
              #status: status,
              #expiresAt: expiresAt,
            }),
            returnValue: _i7.Future<_i5.Member>.value(
              _FakeMember_3(
                this,
                Invocation.method(#addMember, [], {
                  #societyId: societyId,
                  #userId: userId,
                  #name: name,
                  #email: email,
                  #avatarUrl: avatarUrl,
                  #handicap: handicap,
                  #role: role,
                  #status: status,
                  #expiresAt: expiresAt,
                }),
              ),
            ),
          )
          as _i7.Future<_i5.Member>);

  @override
  _i7.Future<_i5.Member> updateMember({
    required String? memberId,
    String? name,
    String? email,
    String? avatarUrl,
    double? handicap,
    String? role,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateMember, [], {
              #memberId: memberId,
              #name: name,
              #email: email,
              #avatarUrl: avatarUrl,
              #handicap: handicap,
              #role: role,
            }),
            returnValue: _i7.Future<_i5.Member>.value(
              _FakeMember_3(
                this,
                Invocation.method(#updateMember, [], {
                  #memberId: memberId,
                  #name: name,
                  #email: email,
                  #avatarUrl: avatarUrl,
                  #handicap: handicap,
                  #role: role,
                }),
              ),
            ),
          )
          as _i7.Future<_i5.Member>);

  @override
  _i7.Future<void> removeMember(String? memberId) =>
      (super.noSuchMethod(
            Invocation.method(#removeMember, [memberId]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i5.Member> getMemberById(String? memberId) =>
      (super.noSuchMethod(
            Invocation.method(#getMemberById, [memberId]),
            returnValue: _i7.Future<_i5.Member>.value(
              _FakeMember_3(
                this,
                Invocation.method(#getMemberById, [memberId]),
              ),
            ),
          )
          as _i7.Future<_i5.Member>);

  @override
  _i7.Future<_i5.Member> getPrimaryMember(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getPrimaryMember, [userId]),
            returnValue: _i7.Future<_i5.Member>.value(
              _FakeMember_3(
                this,
                Invocation.method(#getPrimaryMember, [userId]),
              ),
            ),
          )
          as _i7.Future<_i5.Member>);

  @override
  _i7.Future<_i5.Member> createPrimaryMember({
    required String? userId,
    required String? name,
    required String? email,
    required double? handicap,
    String? avatarUrl,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createPrimaryMember, [], {
              #userId: userId,
              #name: name,
              #email: email,
              #handicap: handicap,
              #avatarUrl: avatarUrl,
            }),
            returnValue: _i7.Future<_i5.Member>.value(
              _FakeMember_3(
                this,
                Invocation.method(#createPrimaryMember, [], {
                  #userId: userId,
                  #name: name,
                  #email: email,
                  #handicap: handicap,
                  #avatarUrl: avatarUrl,
                }),
              ),
            ),
          )
          as _i7.Future<_i5.Member>);

  @override
  _i7.Future<_i5.Member> updatePrimaryMember({
    required String? userId,
    String? name,
    String? email,
    double? handicap,
    String? avatarUrl,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updatePrimaryMember, [], {
              #userId: userId,
              #name: name,
              #email: email,
              #handicap: handicap,
              #avatarUrl: avatarUrl,
            }),
            returnValue: _i7.Future<_i5.Member>.value(
              _FakeMember_3(
                this,
                Invocation.method(#updatePrimaryMember, [], {
                  #userId: userId,
                  #name: name,
                  #email: email,
                  #handicap: handicap,
                  #avatarUrl: avatarUrl,
                }),
              ),
            ),
          )
          as _i7.Future<_i5.Member>);

  @override
  _i7.Future<_i5.Member> updateMemberRole({
    required String? memberId,
    required String? role,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateMemberRole, [], {
              #memberId: memberId,
              #role: role,
            }),
            returnValue: _i7.Future<_i5.Member>.value(
              _FakeMember_3(
                this,
                Invocation.method(#updateMemberRole, [], {
                  #memberId: memberId,
                  #role: role,
                }),
              ),
            ),
          )
          as _i7.Future<_i5.Member>);

  @override
  _i7.Future<void> removeSocietyMember(String? memberId) =>
      (super.noSuchMethod(
            Invocation.method(#removeSocietyMember, [memberId]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}
