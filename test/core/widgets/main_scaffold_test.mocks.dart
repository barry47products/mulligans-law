// Mocks generated by Mockito 5.4.6 from annotations
// in mulligans_law/test/core/widgets/main_scaffold_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter_bloc/flutter_bloc.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mulligans_law/features/auth/presentation/bloc/auth_bloc.dart'
    as _i5;
import 'package:mulligans_law/features/auth/presentation/bloc/auth_event.dart'
    as _i7;
import 'package:mulligans_law/features/auth/presentation/bloc/auth_state.dart'
    as _i2;
import 'package:mulligans_law/features/members/domain/usecases/get_member_count.dart'
    as _i11;
import 'package:mulligans_law/features/societies/domain/entities/society_stats.dart'
    as _i4;
import 'package:mulligans_law/features/societies/domain/usecases/get_society_stats.dart'
    as _i12;
import 'package:mulligans_law/features/societies/presentation/bloc/society_bloc.dart'
    as _i9;
import 'package:mulligans_law/features/societies/presentation/bloc/society_event.dart'
    as _i10;
import 'package:mulligans_law/features/societies/presentation/bloc/society_state.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthState_0 extends _i1.SmartFake implements _i2.AuthState {
  _FakeAuthState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSocietyState_1 extends _i1.SmartFake implements _i3.SocietyState {
  _FakeSocietyState_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSocietyStats_2 extends _i1.SmartFake implements _i4.SocietyStats {
  _FakeSocietyStats_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthBloc extends _i1.Mock implements _i5.AuthBloc {
  MockAuthBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeAuthState_0(this, Invocation.getter(#state)),
          )
          as _i2.AuthState);

  @override
  _i6.Stream<_i2.AuthState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i6.Stream<_i2.AuthState>.empty(),
          )
          as _i6.Stream<_i2.AuthState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i6.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void add(_i7.AuthEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i7.AuthEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i2.AuthState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i7.AuthEvent>(
    _i8.EventHandler<E, _i2.AuthState>? handler, {
    _i8.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(_i8.Transition<_i7.AuthEvent, _i2.AuthState>? transition) =>
      super.noSuchMethod(
        Invocation.method(#onTransition, [transition]),
        returnValueForMissingStub: null,
      );

  @override
  void onDone(_i7.AuthEvent? event, [Object? error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#onDone, [event, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i8.Change<_i2.AuthState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [SocietyBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockSocietyBloc extends _i1.Mock implements _i9.SocietyBloc {
  MockSocietyBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.SocietyState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeSocietyState_1(this, Invocation.getter(#state)),
          )
          as _i3.SocietyState);

  @override
  _i6.Stream<_i3.SocietyState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i6.Stream<_i3.SocietyState>.empty(),
          )
          as _i6.Stream<_i3.SocietyState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i10.SocietyEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i10.SocietyEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i3.SocietyState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i10.SocietyEvent>(
    _i8.EventHandler<E, _i3.SocietyState>? handler, {
    _i8.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i8.Transition<_i10.SocietyEvent, _i3.SocietyState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  void onDone(
    _i10.SocietyEvent? event, [
    Object? error,
    StackTrace? stackTrace,
  ]) => super.noSuchMethod(
    Invocation.method(#onDone, [event, error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void onChange(_i8.Change<_i3.SocietyState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [GetMemberCount].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMemberCount extends _i1.Mock implements _i11.GetMemberCount {
  MockGetMemberCount() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<int> call(String? societyId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [societyId]),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);
}

/// A class which mocks [GetSocietyStats].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSocietyStats extends _i1.Mock implements _i12.GetSocietyStats {
  MockGetSocietyStats() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.SocietyStats> call(String? societyId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [societyId]),
            returnValue: _i6.Future<_i4.SocietyStats>.value(
              _FakeSocietyStats_2(this, Invocation.method(#call, [societyId])),
            ),
          )
          as _i6.Future<_i4.SocietyStats>);
}
