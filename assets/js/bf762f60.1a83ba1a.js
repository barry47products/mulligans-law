"use strict";(globalThis.webpackChunkdocs_technical=globalThis.webpackChunkdocs_technical||[]).push([[38],{8116:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"workflow/development","title":"Development Workflow","description":"This guide explains the step-by-step process for developing new features in Mulligans Law, following Test-Driven Development (TDD) and Clean Architecture principles.","source":"@site/docs/workflow/development.md","sourceDirName":"workflow","slug":"/workflow/development","permalink":"/mulligans-law/docs/workflow/development","draft":false,"unlisted":false,"editUrl":"https://github.com/barry47products/mulligans-law/tree/main/docs-technical/docs/workflow/development.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Architecture Overview","permalink":"/mulligans-law/docs/architecture/overview"},"next":{"title":"Testing Strategy","permalink":"/mulligans-law/docs/testing/strategy"}}');var t=s(4848),r=s(8453);const l={},a="Development Workflow",c={},o=[{value:"Overview",id:"overview",level:2},{value:"Git Workflow",id:"git-workflow",level:2},{value:"Trunk-Based Development",id:"trunk-based-development",level:3},{value:"Starting a New Task",id:"starting-a-new-task",level:3},{value:"1. Pull Latest Changes",id:"1-pull-latest-changes",level:4},{value:"2. Create Feature Branch",id:"2-create-feature-branch",level:4},{value:"Working in TDD Cycles",id:"working-in-tdd-cycles",level:3},{value:"Red-Green-Refactor",id:"red-green-refactor",level:4},{value:"Conventional Commits",id:"conventional-commits",level:3},{value:"Creating Pull Requests",id:"creating-pull-requests",level:3},{value:"1. Ensure Tests Pass",id:"1-ensure-tests-pass",level:4},{value:"2. Push Feature Branch",id:"2-push-feature-branch",level:4},{value:"3. Create Pull Request",id:"3-create-pull-request",level:4},{value:"4. Wait for CI",id:"4-wait-for-ci",level:4},{value:"5. Merge to Main",id:"5-merge-to-main",level:4},{value:"Feature Development Process",id:"feature-development-process",level:2},{value:"Step 1: Plan the Feature",id:"step-1-plan-the-feature",level:3},{value:"Step 2: Write Domain Layer (TDD)",id:"step-2-write-domain-layer-tdd",level:3},{value:"2.1 Define Entity",id:"21-define-entity",level:4},{value:"2.2 Define Use Case",id:"22-define-use-case",level:4},{value:"Step 3: Write Data Layer (TDD)",id:"step-3-write-data-layer-tdd",level:3},{value:"3.1 Create Model",id:"31-create-model",level:4},{value:"3.2 Implement Repository",id:"32-implement-repository",level:4},{value:"Step 4: Write Presentation Layer (TDD)",id:"step-4-write-presentation-layer-tdd",level:3},{value:"4.1 Define BLoC",id:"41-define-bloc",level:4},{value:"4.2 Create Widget",id:"42-create-widget",level:4},{value:"Step 5: Integration",id:"step-5-integration",level:3},{value:"Step 6: Documentation",id:"step-6-documentation",level:3},{value:"Step 7: Code Review &amp; Merge",id:"step-7-code-review--merge",level:3},{value:"Common Workflows",id:"common-workflows",level:2},{value:"Adding a New Feature",id:"adding-a-new-feature",level:3},{value:"Fixing a Bug",id:"fixing-a-bug",level:3},{value:"Refactoring Code",id:"refactoring-code",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Code Quality",id:"code-quality",level:3},{value:"Testing",id:"testing",level:3},{value:"Commits",id:"commits",level:3},{value:"Pull Requests",id:"pull-requests",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Tests Failing Locally",id:"tests-failing-locally",level:3},{value:"CI Failing but Passing Locally",id:"ci-failing-but-passing-locally",level:3},{value:"Merge Conflicts",id:"merge-conflicts",level:3},{value:"Accidentally Committed to Main",id:"accidentally-committed-to-main",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"development-workflow",children:"Development Workflow"})}),"\n",(0,t.jsx)(n.p,{children:"This guide explains the step-by-step process for developing new features in Mulligans Law, following Test-Driven Development (TDD) and Clean Architecture principles."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"Every feature follows the same pattern:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Plan"})," - Review requirements and design tests"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Red"})," - Write failing tests"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Green"})," - Implement minimal code to pass tests"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Refactor"})," - Improve code quality"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Integrate"})," - Wire up to UI and test end-to-end"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Deploy"})," - Merge to main (triggers CI/CD)"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"git-workflow",children:"Git Workflow"}),"\n",(0,t.jsx)(n.h3,{id:"trunk-based-development",children:"Trunk-Based Development"}),"\n",(0,t.jsxs)(n.p,{children:["We use ",(0,t.jsx)(n.strong,{children:"trunk-based development"})," with short-lived feature branches:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"main (always deployable)\n  \u251c\u2500\u2500 feat/score-capture (1-2 days)\n  \u251c\u2500\u2500 fix/handicap-validation (few hours)\n  \u2514\u2500\u2500 refactor/leaderboard-calc (1 day)\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Rules:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"main"})," branch is always stable and deployable"]}),"\n",(0,t.jsx)(n.li,{children:"Feature branches live 1-3 days maximum"}),"\n",(0,t.jsxs)(n.li,{children:["Merge to ",(0,t.jsx)(n.code,{children:"main"})," frequently (daily if possible)"]}),"\n",(0,t.jsx)(n.li,{children:"No long-lived branches"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"starting-a-new-task",children:"Starting a New Task"}),"\n",(0,t.jsx)(n.h4,{id:"1-pull-latest-changes",children:"1. Pull Latest Changes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git checkout main\ngit pull origin main\n"})}),"\n",(0,t.jsx)(n.h4,{id:"2-create-feature-branch",children:"2. Create Feature Branch"}),"\n",(0,t.jsx)(n.p,{children:"Branch naming convention:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"feat/"})," - New feature"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fix/"})," - Bug fix"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"refactor/"})," - Code improvement"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"test/"})," - Test additions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"docs/"})," - Documentation"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Example: Building score capture UI\ngit checkout -b feat/score-capture-ui\n\n# Example: Fixing handicap calculation\ngit checkout -b fix/handicap-calculation\n"})}),"\n",(0,t.jsx)(n.h3,{id:"working-in-tdd-cycles",children:"Working in TDD Cycles"}),"\n",(0,t.jsx)(n.h4,{id:"red-green-refactor",children:"Red-Green-Refactor"}),"\n",(0,t.jsx)(n.p,{children:"Each feature is built in small TDD cycles:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# 1. RED: Write failing test\n# Edit: test/features/scores/domain/usecases/submit_score_test.dart\nflutter test test/features/scores/domain/usecases/submit_score_test.dart\n# \u274c Test fails (expected)\n\ngit add test/\ngit commit -m "test(scores): add failing test for submit score use case"\n\n# 2. GREEN: Make it pass\n# Edit: lib/features/scores/domain/usecases/submit_score.dart\nflutter test test/features/scores/domain/usecases/submit_score_test.dart\n# \u2705 Test passes\n\ngit add lib/ test/\ngit commit -m "feat(scores): implement submit score use case"\n\n# 3. REFACTOR: Improve code\n# Edit: lib/features/scores/domain/usecases/submit_score.dart\nflutter test\n# \u2705 All tests still pass\n\ngit add lib/\ngit commit -m "refactor(scores): extract validation logic to separate method"\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Commit Frequency:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Commit after each RED-GREEN-REFACTOR cycle"}),"\n",(0,t.jsx)(n.li,{children:"Multiple commits per hour during active development"}),"\n",(0,t.jsx)(n.li,{children:"Push to remote at least daily"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"conventional-commits",children:"Conventional Commits"}),"\n",(0,t.jsxs)(n.p,{children:["All commit messages must follow the ",(0,t.jsx)(n.a,{href:"https://www.conventionalcommits.org/",children:"Conventional Commits"})," format:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"<type>(<scope>): <subject>\n\n[optional body]\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Types:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"feat"})," - New feature (bumps minor version)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fix"})," - Bug fix (bumps patch version)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"test"})," - Adding or updating tests"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"refactor"})," - Code refactoring"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"docs"})," - Documentation changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"style"})," - Code formatting"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"perf"})," - Performance improvements"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ci"})," - CI/CD changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"chore"})," - Maintenance tasks"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\u2705 Good:\nfeat(scores): add stableford calculation\nfix(sync): prevent duplicate score uploads\ntest(leaderboards): add order of merit calculation tests\nrefactor(auth): simplify login flow\ndocs(api): update repository documentation\n\n\u274c Bad:\nUpdate code\nFix bug\nWIP\nchanges\nminor updates\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Breaking Changes:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"feat(api)!: redesign authentication flow\n\nBREAKING CHANGE: Auth now requires OAuth tokens instead of API keys.\nUsers must re-authenticate after this update.\n"})}),"\n",(0,t.jsx)(n.p,{children:"This bumps the major version (1.2.3 \u2192 2.0.0)."}),"\n",(0,t.jsx)(n.h3,{id:"creating-pull-requests",children:"Creating Pull Requests"}),"\n",(0,t.jsx)(n.h4,{id:"1-ensure-tests-pass",children:"1. Ensure Tests Pass"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Run all tests\nflutter test\n\n# Run code analysis\nflutter analyze\n\n# Check formatting\ndart format --set-exit-if-changed .\n"})}),"\n",(0,t.jsx)(n.h4,{id:"2-push-feature-branch",children:"2. Push Feature Branch"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git push origin feat/score-capture-ui\n"})}),"\n",(0,t.jsx)(n.h4,{id:"3-create-pull-request",children:"3. Create Pull Request"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Using GitHub CLI\ngh pr create --title "feat(scores): add score capture UI" --body "Implements score capture screen with hole-by-hole input"\n\n# Or via GitHub web interface\n'})}),"\n",(0,t.jsx)(n.p,{children:"The PR template will guide you through:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Task reference from TASKS.md"}),"\n",(0,t.jsx)(n.li,{children:"Description of changes"}),"\n",(0,t.jsx)(n.li,{children:"Testing checklist"}),"\n",(0,t.jsx)(n.li,{children:"Screenshots (for UI changes)"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"4-wait-for-ci",children:"4. Wait for CI"}),"\n",(0,t.jsx)(n.p,{children:"GitHub Actions will automatically:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\u2705 Run ",(0,t.jsx)(n.code,{children:"dart format"})]}),"\n",(0,t.jsxs)(n.li,{children:["\u2705 Run ",(0,t.jsx)(n.code,{children:"flutter analyze"})]}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Run all tests"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Build iOS and Android"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Upload coverage to Codecov"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"All checks must pass before merging."}),"\n",(0,t.jsx)(n.h4,{id:"5-merge-to-main",children:"5. Merge to Main"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Self-review"})," your changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Squash and merge"})," (GitHub default)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Delete branch"})," after merge"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Result:"})," CD pipeline triggers, creating a new release if the commit warrants it."]}),"\n",(0,t.jsx)(n.h2,{id:"feature-development-process",children:"Feature Development Process"}),"\n",(0,t.jsx)(n.h3,{id:"step-1-plan-the-feature",children:"Step 1: Plan the Feature"}),"\n",(0,t.jsx)(n.p,{children:"Before writing code, understand requirements:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Read the ",(0,t.jsx)(n.strong,{children:"functional spec"})," for the feature"]}),"\n",(0,t.jsxs)(n.li,{children:["Read the ",(0,t.jsx)(n.strong,{children:"technical spec"})," for architecture guidance"]}),"\n",(0,t.jsxs)(n.li,{children:["Check ",(0,t.jsx)(n.strong,{children:"TASKS.md"})," for the specific task"]}),"\n",(0,t.jsxs)(n.li,{children:["Identify ",(0,t.jsx)(n.strong,{children:"acceptance criteria"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example: Score Capture Feature"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Functional requirement:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Players enter scores hole-by-hole"}),"\n",(0,t.jsx)(n.li,{children:"App calculates gross, net, and stableford"}),"\n",(0,t.jsx)(n.li,{children:"Scores save offline and sync later"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Technical approach:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Domain: Score entity, calculation use cases"}),"\n",(0,t.jsx)(n.li,{children:"Data: Local database (Drift), Supabase repository"}),"\n",(0,t.jsx)(n.li,{children:"Presentation: BLoC for state, swipeable scorecard UI"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"step-2-write-domain-layer-tdd",children:"Step 2: Write Domain Layer (TDD)"}),"\n",(0,t.jsx)(n.p,{children:"Start with the domain layer - pure business logic, no dependencies."}),"\n",(0,t.jsx)(n.h4,{id:"21-define-entity",children:"2.1 Define Entity"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create test file FIRST\ntouch test/features/scores/domain/entities/score_test.dart\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// test/features/scores/domain/entities/score_test.dart\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:mulligans_law/features/scores/domain/entities/score.dart';\n\nvoid main() {\n  group('Score Entity', () {\n    test('should calculate gross total correctly', () {\n      // Arrange\n      final holeScores = [4, 3, 5, 4, 4, 3, 5, 4, 4, 5, 4, 3, 4, 5, 4, 4, 3, 5];\n      final score = Score(holeScores: holeScores);\n\n      // Act\n      final grossTotal = score.calculateGross();\n\n      // Assert\n      expect(grossTotal, 75);\n    });\n  });\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# RED: Run test (fails - Score class doesn't exist)\nflutter test test/features/scores/domain/entities/score_test.dart\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// lib/features/scores/domain/entities/score.dart\nclass Score {\n  final List<int> holeScores;\n\n  Score({required this.holeScores});\n\n  int calculateGross() {\n    return holeScores.fold(0, (sum, score) => sum + score);\n  }\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# GREEN: Test passes\nflutter test test/features/scores/domain/entities/score_test.dart\n"})}),"\n",(0,t.jsx)(n.h4,{id:"22-define-use-case",children:"2.2 Define Use Case"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// test/features/scores/domain/usecases/submit_score_test.dart\nvoid main() {\n  late SubmitScoreUseCase useCase;\n  late MockScoreRepository mockRepository;\n\n  setUp(() {\n    mockRepository = MockScoreRepository();\n    useCase = SubmitScoreUseCase(mockRepository);\n  });\n\n  test('should submit complete score', () async {\n    // Arrange\n    final score = Score(holeScores: List.filled(18, 4));\n    when(mockRepository.submitScore(score))\n        .thenAnswer((_) async => score);\n\n    // Act\n    final result = await useCase(score);\n\n    // Assert\n    verify(mockRepository.submitScore(score)).called(1);\n    expect(result, score);\n  });\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-3-write-data-layer-tdd",children:"Step 3: Write Data Layer (TDD)"}),"\n",(0,t.jsx)(n.p,{children:"Implement repositories that interact with external services."}),"\n",(0,t.jsx)(n.h4,{id:"31-create-model",children:"3.1 Create Model"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// lib/features/scores/data/models/score_model.dart\nclass ScoreModel extends Score {\n  ScoreModel({\n    required String id,\n    required List<int> holeScores,\n  }) : super(holeScores: holeScores);\n\n  factory ScoreModel.fromJson(Map<String, dynamic> json) {\n    return ScoreModel(\n      id: json['id'],\n      holeScores: List<int>.from(json['hole_scores']),\n    );\n  }\n\n  Map<String, dynamic> toJson() {\n    return {\n      'id': id,\n      'hole_scores': holeScores,\n    };\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"32-implement-repository",children:"3.2 Implement Repository"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// lib/features/scores/data/repositories/score_repository_impl.dart\nclass ScoreRepositoryImpl implements ScoreRepository {\n  final SupabaseClient supabase;\n  final LocalDatabase localDb;\n  final SyncEngine syncEngine;\n\n  @override\n  Future<Score> submitScore(Score score) async {\n    // 1. Write to local database first (offline-first)\n    await localDb.scores.insertScore(score);\n\n    // 2. Queue for sync\n    await syncEngine.queueSync('scores', score.id, SyncAction.update);\n\n    // 3. Try to sync immediately (non-blocking)\n    unawaited(syncEngine.sync());\n\n    return score;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-4-write-presentation-layer-tdd",children:"Step 4: Write Presentation Layer (TDD)"}),"\n",(0,t.jsx)(n.p,{children:"Build the UI with BLoC for state management."}),"\n",(0,t.jsx)(n.h4,{id:"41-define-bloc",children:"4.1 Define BLoC"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// test/features/scores/presentation/bloc/score_capture_bloc_test.dart\nvoid main() {\n  late ScoreCaptureBloc bloc;\n  late MockSubmitScoreUseCase mockSubmitScore;\n\n  setUp(() {\n    mockSubmitScore = MockSubmitScoreUseCase();\n    bloc = ScoreCaptureBloc(submitScore: mockSubmitScore);\n  });\n\n  blocTest<ScoreCaptureBloc, ScoreCaptureState>(\n    'emits [ScoreSubmitting, ScoreSubmitted] when SubmitScore succeeds',\n    build: () {\n      when(mockSubmitScore(any)).thenAnswer((_) async => testScore);\n      return bloc;\n    },\n    act: (bloc) => bloc.add(SubmitScore(testScore)),\n    expect: () => [\n      ScoreSubmitting(),\n      ScoreSubmitted(testScore),\n    ],\n  );\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"42-create-widget",children:"4.2 Create Widget"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// test/features/scores/presentation/screens/score_capture_screen_test.dart\nvoid main() {\n  testWidgets('displays scorecard', (tester) async {\n    await tester.pumpWidget(\n      MaterialApp(home: ScoreCaptureScreen()),\n    );\n\n    expect(find.text('Hole 1'), findsOneWidget);\n    expect(find.byType(ScoreCard), findsOneWidget);\n  });\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-5-integration",children:"Step 5: Integration"}),"\n",(0,t.jsx)(n.p,{children:"Wire everything together:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Set up dependency injection"})," (when using get_it)"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Connect BLoC to UI"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Test manually"})," on device/simulator"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Verify offline"})," functionality"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Test on iOS\nflutter run -d ios\n\n# Test on Android\nflutter run -d android\n\n# Test offline\n# 1. Enable Airplane Mode\n# 2. Perform actions\n# 3. Verify data saved locally\n# 4. Disable Airplane Mode\n# 5. Verify data syncs to Supabase\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-6-documentation",children:"Step 6: Documentation"}),"\n",(0,t.jsx)(n.p,{children:"Update documentation if needed:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"When to update Docusaurus:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u2705 New API endpoint or repository method"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Architecture changes"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 New testing patterns"}),"\n",(0,t.jsx)(n.li,{children:"\u274c Minor bug fixes"}),"\n",(0,t.jsx)(n.li,{children:"\u274c Internal refactoring"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cd docs-technical\nnpm start  # Preview locally\n# Edit relevant .md files\nnpm run build  # Verify builds\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-7-code-review--merge",children:"Step 7: Code Review & Merge"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Self-review"})," your code"]}),"\n",(0,t.jsxs)(n.li,{children:["Create ",(0,t.jsx)(n.strong,{children:"pull request"})]}),"\n",(0,t.jsxs)(n.li,{children:["Wait for ",(0,t.jsx)(n.strong,{children:"CI to pass"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Merge"})," to main"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Monitor CD"})," for deployment"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-workflows",children:"Common Workflows"}),"\n",(0,t.jsx)(n.h3,{id:"adding-a-new-feature",children:"Adding a New Feature"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# 1. Start from main\ngit checkout main && git pull\n\n# 2. Create branch\ngit checkout -b feat/leaderboard-display\n\n# 3. TDD cycle (repeat)\n# Write test \u2192 Run (RED) \u2192 Implement \u2192 Run (GREEN) \u2192 Refactor\ngit commit -m "test(leaderboards): add test for order of merit calculation"\ngit commit -m "feat(leaderboards): implement order of merit calculation"\n\n# 4. Push and create PR\ngit push origin feat/leaderboard-display\ngh pr create\n\n# 5. Wait for CI, then merge\ngh pr merge --squash\n'})}),"\n",(0,t.jsx)(n.h3,{id:"fixing-a-bug",children:"Fixing a Bug"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# 1. Create fix branch\ngit checkout -b fix/handicap-calculation\n\n# 2. Write failing test that reproduces bug\ngit commit -m "test(scores): add failing test for handicap edge case"\n\n# 3. Fix the bug\ngit commit -m "fix(scores): handle edge case in handicap calculation"\n\n# 4. PR and merge\ngit push origin fix/handicap-calculation\ngh pr create --title "fix(scores): handle edge case in handicap calculation"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"refactoring-code",children:"Refactoring Code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# 1. Ensure tests exist\nflutter test\n\n# 2. Create branch\ngit checkout -b refactor/simplify-score-calc\n\n# 3. Refactor while keeping tests green\n# Make changes\nflutter test  # \u2705 Still passing\n\ngit commit -m "refactor(scores): extract calculation to helper method"\n\n# 4. PR and merge\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"code-quality",children:"Code Quality"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Before Every Commit:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Format code\ndart format .\n\n# Analyze code\nflutter analyze\n\n# Run tests\nflutter test\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Git hooks automatically enforce these!"})}),"\n",(0,t.jsx)(n.h3,{id:"testing",children:"Testing"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Test Coverage:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u2705 Write tests BEFORE implementation (TDD)"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Aim for 70% overall coverage"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Test business logic thoroughly"}),"\n",(0,t.jsx)(n.li,{children:"\u274c Don't test third-party libraries"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"What to Test:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u2705 Domain entities and use cases"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 BLoC state transitions"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Repository implementations"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Widget interactions"}),"\n",(0,t.jsx)(n.li,{children:"\u274c Simple getters/setters"}),"\n",(0,t.jsx)(n.li,{children:"\u274c Data classes with no logic"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"commits",children:"Commits"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Frequency:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Commit after each TDD cycle"}),"\n",(0,t.jsx)(n.li,{children:"Multiple commits per feature"}),"\n",(0,t.jsx)(n.li,{children:"Push at least daily"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Size:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Small, focused commits"}),"\n",(0,t.jsx)(n.li,{children:"One logical change per commit"}),"\n",(0,t.jsx)(n.li,{children:"Easy to review and revert if needed"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Messages:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Follow Conventional Commits"}),"\n",(0,t.jsx)(n.li,{children:"Be descriptive"}),"\n",(0,t.jsx)(n.li,{children:"Explain WHY, not just WHAT"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"pull-requests",children:"Pull Requests"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Size:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Complete one task from TASKS.md"}),"\n",(0,t.jsx)(n.li,{children:"200-400 lines changed ideal"}),"\n",(0,t.jsx)(n.li,{children:"Max 800 lines (split larger features)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Review:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Self-review before requesting review"}),"\n",(0,t.jsx)(n.li,{children:"Check all CI checks pass"}),"\n",(0,t.jsx)(n.li,{children:"Add screenshots for UI changes"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"tests-failing-locally",children:"Tests Failing Locally"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Clean and rebuild\nflutter clean\nflutter pub get\nflutter test\n"})}),"\n",(0,t.jsx)(n.h3,{id:"ci-failing-but-passing-locally",children:"CI Failing but Passing Locally"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Ensure you're on latest main\ngit fetch origin\ngit rebase origin/main\n\n# Check Flutter version matches CI\nflutter --version  # Should be 3.35.6\n"})}),"\n",(0,t.jsx)(n.h3,{id:"merge-conflicts",children:"Merge Conflicts"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Rebase on main\ngit fetch origin\ngit rebase origin/main\n\n# Resolve conflicts\n# Edit files, then:\ngit add .\ngit rebase --continue\n"})}),"\n",(0,t.jsx)(n.h3,{id:"accidentally-committed-to-main",children:"Accidentally Committed to Main"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create branch from current commit\ngit branch feat/my-feature\n\n# Reset main to remote\ngit checkout main\ngit reset --hard origin/main\n\n# Switch to feature branch\ngit checkout feat/my-feature\n"})}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/mulligans-law/docs/testing/strategy",children:"Testing Strategy"})," - Learn the TDD approach"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/mulligans-law/docs/architecture/overview",children:"Architecture Overview"})," - Understand the structure"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var i=s(6540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);