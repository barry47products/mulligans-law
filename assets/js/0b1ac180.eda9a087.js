"use strict";(globalThis.webpackChunkdocs_technical=globalThis.webpackChunkdocs_technical||[]).push([[863],{6264:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"architecture/overview","title":"Architecture Overview","description":"Mulligans Law is built using Clean Architecture principles with an offline-first approach, ensuring the app works seamlessly with or without an internet connection.","source":"@site/docs/architecture/overview.md","sourceDirName":"architecture","slug":"/architecture/overview","permalink":"/mulligans-law/docs/architecture/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/barry47products/mulligans-law/tree/main/docs-technical/docs/architecture/overview.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/mulligans-law/docs/getting-started/installation"},"next":{"title":"Development Workflow","permalink":"/mulligans-law/docs/workflow/development"}}');var i=s(4848),t=s(8453);const l={},c="Architecture Overview",a={},d=[{value:"Core Principles",id:"core-principles",level:2},{value:"1. Clean Architecture",id:"1-clean-architecture",level:3},{value:"2. Offline-First",id:"2-offline-first",level:3},{value:"3. Test-Driven Development (TDD)",id:"3-test-driven-development-tdd",level:3},{value:"Layer Structure",id:"layer-structure",level:2},{value:"Presentation Layer",id:"presentation-layer",level:3},{value:"Domain Layer",id:"domain-layer",level:3},{value:"Data Layer",id:"data-layer",level:3},{value:"Data Flow",id:"data-flow",level:2},{value:"Write Operation (Create Score)",id:"write-operation-create-score",level:3},{value:"Read Operation (Get Leaderboard)",id:"read-operation-get-leaderboard",level:3},{value:"Technology Stack",id:"technology-stack",level:2},{value:"Frontend (Flutter)",id:"frontend-flutter",level:3},{value:"Backend &amp; Database",id:"backend--database",level:3},{value:"Testing",id:"testing",level:3},{value:"CI/CD",id:"cicd",level:3},{value:"Database Schema",id:"database-schema",level:2},{value:"Core Tables",id:"core-tables",level:3},{value:"Societies",id:"societies",level:4},{value:"Members",id:"members",level:4},{value:"Future Tables",id:"future-tables",level:3},{value:"Offline Sync Strategy",id:"offline-sync-strategy",level:2},{value:"Sync Engine Architecture",id:"sync-engine-architecture",level:3},{value:"Conflict Resolution",id:"conflict-resolution",level:3},{value:"Sync Queue",id:"sync-queue",level:3},{value:"Security Model",id:"security-model",level:2},{value:"Row Level Security (RLS)",id:"row-level-security-rls",level:3},{value:"<strong>Example: Societies Table</strong>",id:"example-societies-table",level:4},{value:"Authentication",id:"authentication",level:3},{value:"State Management",id:"state-management",level:2},{value:"BLoC Pattern",id:"bloc-pattern",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Database Optimization",id:"database-optimization",level:3},{value:"UI Performance",id:"ui-performance",level:3},{value:"Network Efficiency",id:"network-efficiency",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Error Types",id:"error-types",level:3},{value:"Error Handling Flow",id:"error-handling-flow",level:3},{value:"Directory Structure",id:"directory-structure",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Related Documentation",id:"related-documentation",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"architecture-overview",children:"Architecture Overview"})}),"\n",(0,i.jsxs)(n.p,{children:["Mulligans Law is built using ",(0,i.jsx)(n.strong,{children:"Clean Architecture"})," principles with an ",(0,i.jsx)(n.strong,{children:"offline-first"})," approach, ensuring the app works seamlessly with or without an internet connection."]}),"\n",(0,i.jsx)(n.h2,{id:"core-principles",children:"Core Principles"}),"\n",(0,i.jsx)(n.h3,{id:"1-clean-architecture",children:"1. Clean Architecture"}),"\n",(0,i.jsx)(n.p,{children:"The codebase follows Uncle Bob's Clean Architecture pattern, organizing code into distinct layers with clear dependencies:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Presentation Layer (UI)\n       \u2193\nDomain Layer (Business Logic)\n       \u2193\nData Layer (External Services)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Rules:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dependencies point inward"})," - Outer layers depend on inner layers, never the reverse"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Domain layer is independent"})," - Contains only business logic, no framework dependencies"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Testable in isolation"})," - Each layer can be tested independently"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-offline-first",children:"2. Offline-First"}),"\n",(0,i.jsx)(n.p,{children:"The app prioritizes local data and synchronizes with the backend when online:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Local database first"})," - All writes go to SQLite (Drift) immediately"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Optimistic UI updates"})," - UI reflects changes instantly"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Background sync"})," - Data syncs to Supabase when online"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Conflict resolution"})," - Last-write-wins strategy"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-test-driven-development-tdd",children:"3. Test-Driven Development (TDD)"}),"\n",(0,i.jsx)(n.p,{children:"All features are built using the Red-Green-Refactor cycle:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Red"})," - Write failing test first"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Green"})," - Write minimal code to pass"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Refactor"})," - Improve code quality"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Target Coverage:"})," 70% overall (70% unit, 20% widget, 10% integration)"]}),"\n",(0,i.jsx)(n.h2,{id:"layer-structure",children:"Layer Structure"}),"\n",(0,i.jsx)(n.h3,{id:"presentation-layer",children:"Presentation Layer"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Location:"})," ",(0,i.jsx)(n.code,{children:"lib/features/*/presentation/"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Responsibilities:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Display UI to users"}),"\n",(0,i.jsx)(n.li,{children:"Handle user interactions"}),"\n",(0,i.jsx)(n.li,{children:"Manage UI state with BLoC"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Components:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Screens"})," - Full page views"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Widgets"})," - Reusable UI components"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"BLoCs"})," - State management (Business Logic Component)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"lib/features/scores/presentation/\n\u251c\u2500\u2500 bloc/\n\u2502   \u251c\u2500\u2500 score_capture_bloc.dart\n\u2502   \u251c\u2500\u2500 score_capture_event.dart\n\u2502   \u2514\u2500\u2500 score_capture_state.dart\n\u251c\u2500\u2500 screens/\n\u2502   \u2514\u2500\u2500 score_capture_screen.dart\n\u2514\u2500\u2500 widgets/\n    \u2514\u2500\u2500 score_card.dart\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Dependencies:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Can depend on Domain layer (use cases, entities)"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Cannot depend on Data layer directly"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"domain-layer",children:"Domain Layer"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Location:"})," ",(0,i.jsx)(n.code,{children:"lib/features/*/domain/"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Responsibilities:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Define business logic and rules"}),"\n",(0,i.jsx)(n.li,{children:"Define data contracts (entities, repositories)"}),"\n",(0,i.jsx)(n.li,{children:"No framework or external dependencies"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Components:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Entities"})," - Core business objects (Score, Round, Member)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use Cases"})," - Single business operations (SubmitScore, CreateRound)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Repository Interfaces"})," - Data access contracts"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"lib/features/scores/domain/\n\u251c\u2500\u2500 entities/\n\u2502   \u2514\u2500\u2500 score.dart\n\u251c\u2500\u2500 repositories/\n\u2502   \u2514\u2500\u2500 score_repository.dart  // Interface only\n\u2514\u2500\u2500 usecases/\n    \u251c\u2500\u2500 submit_score.dart\n    \u2514\u2500\u2500 calculate_stableford.dart\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Dependencies:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Pure Dart - no Flutter or external packages"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Independent of all other layers"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"data-layer",children:"Data Layer"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Location:"})," ",(0,i.jsx)(n.code,{children:"lib/features/*/data/"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Responsibilities:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Implement repository interfaces"}),"\n",(0,i.jsx)(n.li,{children:"Manage data sources (API, database)"}),"\n",(0,i.jsx)(n.li,{children:"Handle data transformations"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Components:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Models"})," - Data Transfer Objects (DTOs)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Data Sources"})," - Remote (Supabase) and Local (Drift)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Repository Implementations"})," - Implement domain interfaces"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"lib/features/scores/data/\n\u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 score_model.dart  // Extends Score entity\n\u251c\u2500\u2500 datasources/\n\u2502   \u251c\u2500\u2500 score_remote_datasource.dart\n\u2502   \u2514\u2500\u2500 score_local_datasource.dart\n\u2514\u2500\u2500 repositories/\n    \u2514\u2500\u2500 score_repository_impl.dart  // Implements ScoreRepository\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Dependencies:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Can depend on Domain layer"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Can use external packages (Supabase, Drift)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"data-flow",children:"Data Flow"}),"\n",(0,i.jsx)(n.h3,{id:"write-operation-create-score",children:"Write Operation (Create Score)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"User Action\n    \u2193\n[Presentation] ScoreBloc receives CreateScoreEvent\n    \u2193\n[Domain] CreateScoreUseCase executes\n    \u2193\n[Data] ScoreRepositoryImpl.createScore()\n    \u2193\n[Data] Write to Local DB (Drift) \u2190 Returns immediately\n    \u2193\n[Data] Queue for sync\n    \u2193\n[Presentation] BLoC emits ScoreCreated state\n    \u2193\nUI updates (optimistic)\n    \u2193\n[Background] SyncEngine syncs to Supabase\n"})}),"\n",(0,i.jsx)(n.h3,{id:"read-operation-get-leaderboard",children:"Read Operation (Get Leaderboard)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"User opens leaderboard\n    \u2193\n[Presentation] LeaderboardBloc receives LoadLeaderboard event\n    \u2193\n[Domain] GetLeaderboardUseCase executes\n    \u2193\n[Data] LeaderboardRepositoryImpl.getLeaderboard()\n    \u2193\n[Data] Read from Local DB (fast) \u2192 Return to UI\n    \u2193\n[Presentation] Display cached data immediately\n    \u2193\n[Background] Fetch fresh data from Supabase\n    \u2193\n[Data] Update local DB with fresh data\n    \u2193\n[Presentation] Stream emits updated data\n    \u2193\nUI updates with fresh data\n"})}),"\n",(0,i.jsx)(n.h2,{id:"technology-stack",children:"Technology Stack"}),"\n",(0,i.jsx)(n.h3,{id:"frontend-flutter",children:"Frontend (Flutter)"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Component"}),(0,i.jsx)(n.th,{children:"Technology"}),(0,i.jsx)(n.th,{children:"Purpose"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Framework"})}),(0,i.jsx)(n.td,{children:"Flutter 3.35.6"}),(0,i.jsx)(n.td,{children:"Cross-platform UI"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Language"})}),(0,i.jsx)(n.td,{children:"Dart 3.9.2"}),(0,i.jsx)(n.td,{children:"Programming language"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"State Management"})}),(0,i.jsx)(n.td,{children:"flutter_bloc 8.1.6"}),(0,i.jsx)(n.td,{children:"BLoC pattern for state"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Navigation"})}),(0,i.jsx)(n.td,{children:"go_router (future)"}),(0,i.jsx)(n.td,{children:"Declarative routing"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"DI"})}),(0,i.jsx)(n.td,{children:"get_it (future)"}),(0,i.jsx)(n.td,{children:"Dependency injection"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"backend--database",children:"Backend & Database"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Component"}),(0,i.jsx)(n.th,{children:"Technology"}),(0,i.jsx)(n.th,{children:"Purpose"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Backend"})}),(0,i.jsx)(n.td,{children:"Supabase"}),(0,i.jsx)(n.td,{children:"Auth, PostgreSQL, Storage, Realtime"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Remote DB"})}),(0,i.jsx)(n.td,{children:"PostgreSQL"}),(0,i.jsx)(n.td,{children:"Cloud database"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Local DB"})}),(0,i.jsx)(n.td,{children:"Drift (SQLite)"}),(0,i.jsx)(n.td,{children:"Offline storage"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"ORM"})}),(0,i.jsx)(n.td,{children:"Drift 2.22.0"}),(0,i.jsx)(n.td,{children:"Type-safe SQL queries"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Auth"})}),(0,i.jsx)(n.td,{children:"Supabase Auth"}),(0,i.jsx)(n.td,{children:"User authentication"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"testing",children:"Testing"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Component"}),(0,i.jsx)(n.th,{children:"Technology"}),(0,i.jsx)(n.th,{children:"Purpose"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Unit Tests"})}),(0,i.jsx)(n.td,{children:"flutter_test"}),(0,i.jsx)(n.td,{children:"Test business logic"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Widget Tests"})}),(0,i.jsx)(n.td,{children:"flutter_test"}),(0,i.jsx)(n.td,{children:"Test UI components"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Mocking"})}),(0,i.jsx)(n.td,{children:"mockito 5.4.4"}),(0,i.jsx)(n.td,{children:"Mock dependencies"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"BLoC Tests"})}),(0,i.jsx)(n.td,{children:"bloc_test 9.1.7"}),(0,i.jsx)(n.td,{children:"Test BLoC state"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Coverage"})}),(0,i.jsx)(n.td,{children:"Codecov"}),(0,i.jsx)(n.td,{children:"Track coverage"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"cicd",children:"CI/CD"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Component"}),(0,i.jsx)(n.th,{children:"Technology"}),(0,i.jsx)(n.th,{children:"Purpose"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"CI"})}),(0,i.jsx)(n.td,{children:"GitHub Actions"}),(0,i.jsx)(n.td,{children:"Automated testing"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"CD"})}),(0,i.jsx)(n.td,{children:"GitHub Actions + semantic-release"}),(0,i.jsx)(n.td,{children:"Auto versioning & deployment"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Linting"})}),(0,i.jsx)(n.td,{children:"flutter_lints 5.0.0"}),(0,i.jsx)(n.td,{children:"Code quality"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Formatting"})}),(0,i.jsx)(n.td,{children:"dart format"}),(0,i.jsx)(n.td,{children:"Code style"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Git Hooks"})}),(0,i.jsx)(n.td,{children:"Lefthook 1.13.6"}),(0,i.jsx)(n.td,{children:"Pre-commit checks"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"database-schema",children:"Database Schema"}),"\n",(0,i.jsx)(n.h3,{id:"core-tables",children:"Core Tables"}),"\n",(0,i.jsx)(n.h4,{id:"societies",children:"Societies"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE societies (\n    id UUID PRIMARY KEY,\n    name TEXT NOT NULL,\n    description TEXT,\n    logo_url TEXT,\n    created_at TIMESTAMPTZ,\n    updated_at TIMESTAMPTZ\n);\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Top-level organization for golf societies"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Security:"})," Row Level Security (RLS) ensures members only see their societies"]}),"\n",(0,i.jsx)(n.h4,{id:"members",children:"Members"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE members (\n    id UUID PRIMARY KEY,\n    society_id UUID REFERENCES societies(id),\n    user_id UUID REFERENCES auth.users(id),\n    name TEXT NOT NULL,\n    email TEXT NOT NULL,\n    handicap INTEGER CHECK (handicap >= 0 AND handicap <= 54),\n    role TEXT CHECK (role IN ('CAPTAIN', 'MEMBER')),\n    status TEXT CHECK (status IN ('ACTIVE', 'INACTIVE', 'PENDING')),\n    created_at TIMESTAMPTZ,\n    updated_at TIMESTAMPTZ\n);\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Links users to societies with roles and golf handicaps"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Security:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Captains can manage members"}),"\n",(0,i.jsx)(n.li,{children:"Members can update their own profile"}),"\n",(0,i.jsx)(n.li,{children:"All queries scoped to user's societies"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"future-tables",children:"Future Tables"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"courses"})," - Golf courses with hole details"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"rounds"})," - Competition rounds"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"scores"})," - Player scores for rounds"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"groups"})," - Player pairings"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"tournaments"})," - Multi-round tournaments"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"seasons"})," - Annual competitions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"spot_prizes"})," - Special prizes (longest drive, nearest pin)"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"offline-sync-strategy",children:"Offline Sync Strategy"}),"\n",(0,i.jsx)(n.h3,{id:"sync-engine-architecture",children:"Sync Engine Architecture"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"User Action \u2192 Local DB (immediate)\n                  \u2193\n            Queue for Sync\n                  \u2193\n         [Sync Engine]\n                  \u2193\n    Online? \u2192 Yes \u2192 Sync to Supabase\n        \u2193              \u2193\n       No          Success \u2192 Mark synced\n        \u2193              \u2193\n    Retry Later    Failure \u2192 Retry with backoff\n"})}),"\n",(0,i.jsx)(n.h3,{id:"conflict-resolution",children:"Conflict Resolution"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Strategy:"})," Last-write-wins"]}),"\n",(0,i.jsx)(n.p,{children:"When conflicts occur:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Compare ",(0,i.jsx)(n.code,{children:"updated_at"})," timestamps"]}),"\n",(0,i.jsx)(n.li,{children:"Keep the most recent change"}),"\n",(0,i.jsx)(n.li,{children:"Log conflict for manual review if needed"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"sync-queue",children:"Sync Queue"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Table:"})," ",(0,i.jsx)(n.code,{children:"sync_queue"})," (local only)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class SyncQueueItem {\n  String id;\n  String table;\n  String action; // CREATE, UPDATE, DELETE\n  String recordId;\n  Map<String, dynamic> data;\n  DateTime createdAt;\n  int retryCount;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Process:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Actions queued locally"}),"\n",(0,i.jsx)(n.li,{children:"Sync engine processes queue in order"}),"\n",(0,i.jsx)(n.li,{children:"Failed actions retry with exponential backoff"}),"\n",(0,i.jsx)(n.li,{children:"Successful syncs remove from queue"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"security-model",children:"Security Model"}),"\n",(0,i.jsx)(n.h3,{id:"row-level-security-rls",children:"Row Level Security (RLS)"}),"\n",(0,i.jsx)(n.p,{children:"All tables use PostgreSQL RLS to enforce data access:"}),"\n",(0,i.jsx)(n.h4,{id:"example-societies-table",children:(0,i.jsx)(n.strong,{children:"Example: Societies Table"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"-- Members can view societies they belong to\nCREATE POLICY \"View societies you are a member of\"\n    ON societies FOR SELECT\n    USING (\n        id IN (\n            SELECT society_id FROM members\n            WHERE user_id = auth.uid() AND status = 'ACTIVE'\n        )\n    );\n\n-- Only captains can update societies\nCREATE POLICY \"Captains can update their society\"\n    ON societies FOR UPDATE\n    USING (\n        id IN (\n            SELECT society_id FROM members\n            WHERE user_id = auth.uid()\n            AND role = 'CAPTAIN'\n        )\n    );\n"})}),"\n",(0,i.jsx)(n.h3,{id:"authentication",children:"Authentication"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Provider:"})," Supabase Auth"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Flow:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"User signs in (email/password)"}),"\n",(0,i.jsx)(n.li,{children:"Supabase returns JWT token"}),"\n",(0,i.jsx)(n.li,{children:"Token stored securely (flutter_secure_storage)"}),"\n",(0,i.jsx)(n.li,{children:"Token sent with all API requests"}),"\n",(0,i.jsx)(n.li,{children:"RLS policies enforce permissions"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Session Management:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tokens auto-refresh"}),"\n",(0,i.jsx)(n.li,{children:"Offline: cached auth state"}),"\n",(0,i.jsx)(n.li,{children:"Online: validate with server"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"state-management",children:"State Management"}),"\n",(0,i.jsx)(n.h3,{id:"bloc-pattern",children:"BLoC Pattern"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why BLoC?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Predictable state changes"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Easy to test"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Separates business logic from UI"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Works well with streams"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Structure:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Events - User actions\nabstract class ScoreEvent {}\nclass LoadScore extends ScoreEvent {\n  final String scoreId;\n}\n\n// States - UI states\nabstract class ScoreState {}\nclass ScoreInitial extends ScoreState {}\nclass ScoreLoading extends ScoreState {}\nclass ScoreLoaded extends ScoreState {\n  final Score score;\n}\nclass ScoreError extends ScoreState {\n  final String message;\n}\n\n// BLoC - Business logic\nclass ScoreBloc extends Bloc<ScoreEvent, ScoreState> {\n  final GetScoreUseCase getScore;\n\n  ScoreBloc(this.getScore) : super(ScoreInitial()) {\n    on<LoadScore>(_onLoadScore);\n  }\n\n  Future<void> _onLoadScore(LoadScore event, Emitter emit) async {\n    emit(ScoreLoading());\n    try {\n      final score = await getScore(event.scoreId);\n      emit(ScoreLoaded(score));\n    } catch (e) {\n      emit(ScoreError(e.toString()));\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,i.jsx)(n.h3,{id:"database-optimization",children:"Database Optimization"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Indexes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"All foreign keys indexed"}),"\n",(0,i.jsx)(n.li,{children:"Frequently queried fields indexed"}),"\n",(0,i.jsx)(n.li,{children:"Composite indexes for common joins"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Query Optimization:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Select only needed fields"}),"\n",(0,i.jsx)(n.li,{children:"Use pagination for large datasets"}),"\n",(0,i.jsx)(n.li,{children:"Implement cursor-based pagination"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ui-performance",children:"UI Performance"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Best Practices:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Const constructors where possible"}),"\n",(0,i.jsx)(n.li,{children:"ListView.builder for long lists"}),"\n",(0,i.jsx)(n.li,{children:"cached_network_image for photos"}),"\n",(0,i.jsx)(n.li,{children:"Lazy loading for images"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"network-efficiency",children:"Network Efficiency"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Strategies:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Batch API calls when possible"}),"\n",(0,i.jsx)(n.li,{children:"Compress images before upload"}),"\n",(0,i.jsx)(n.li,{children:"Use Supabase Realtime for live updates"}),"\n",(0,i.jsx)(n.li,{children:"Cache responses locally"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.h3,{id:"error-types",children:"Error Types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Domain layer errors\nclass DomainException implements Exception {\n  final String message;\n  DomainException(this.message);\n}\n\nclass ValidationException extends DomainException {}\nclass NotFoundException extends DomainException {}\nclass UnauthorizedException extends DomainException {}\n\n// Data layer errors\nclass DataException implements Exception {\n  final String message;\n  DataException(this.message);\n}\n\nclass NetworkException extends DataException {}\nclass DatabaseException extends DataException {}\nclass SyncException extends DataException {}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"error-handling-flow",children:"Error Handling Flow"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Repository catches low-level errors\ntry {\n  final result = await supabase.from('scores').select();\n} on PostgrestException catch (e) {\n  throw DatabaseException(e.message);\n} on SocketException {\n  throw NetworkException('No internet');\n}\n\n// Use case handles business errors\ntry {\n  await repository.submitScore(score);\n} on ValidationException {\n  // Re-throw for UI\n  rethrow;\n} on NetworkException {\n  // Handle offline gracefully\n  // Score already saved locally\n}\n\n// BLoC presents errors to UI\ntry {\n  await submitScore(scoreId);\n  emit(ScoreSubmitted());\n} on ValidationException catch (e) {\n  emit(ScoreError(e.message));\n} on NetworkException {\n  emit(ScoreError('Saved locally, will sync later'));\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"directory-structure",children:"Directory Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mulligans-law/\n\u251c\u2500\u2500 lib/\n\u2502   \u251c\u2500\u2500 core/                    # Shared code\n\u2502   \u2502   \u251c\u2500\u2500 config/             # App configuration\n\u2502   \u2502   \u251c\u2500\u2500 constants/          # App constants\n\u2502   \u2502   \u251c\u2500\u2500 errors/             # Error classes\n\u2502   \u2502   \u251c\u2500\u2500 usecases/           # Base use case\n\u2502   \u2502   \u2514\u2500\u2500 utils/              # Helper functions\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 features/               # Feature modules\n\u2502   \u2502   \u251c\u2500\u2500 auth/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 data/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 domain/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 presentation/\n\u2502   \u2502   \u2502\n\u2502   \u2502   \u251c\u2500\u2500 scores/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 data/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 domain/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 presentation/\n\u2502   \u2502   \u2502\n\u2502   \u2502   \u2514\u2500\u2500 [other features]/\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 main.dart               # App entry point\n\u2502\n\u251c\u2500\u2500 test/                        # Tests mirror lib/\n\u2502   \u251c\u2500\u2500 core/\n\u2502   \u251c\u2500\u2500 features/\n\u2502   \u251c\u2500\u2500 helpers/                # Test utilities\n\u2502   \u2514\u2500\u2500 fixtures/               # Test data\n\u2502\n\u251c\u2500\u2500 supabase/                    # Database migrations\n\u2502   \u251c\u2500\u2500 migrations/\n\u2502   \u2514\u2500\u2500 seed.sql\n\u2502\n\u2514\u2500\u2500 docs-technical/              # Docusaurus docs\n    \u2514\u2500\u2500 docs/\n"})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"Now that you understand the architecture, explore:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/mulligans-law/docs/workflow/development",children:"Development Workflow"})," - How to build features"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/mulligans-law/docs/testing/strategy",children:"Testing Strategy"})," - TDD approach and testing patterns"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/barry47products/mulligans-law/blob/main/docs/technical-spec.md",children:"Technical Specification"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/barry47products/mulligans-law/blob/main/docs/functional-spec.md",children:"Functional Specification"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/barry47products/mulligans-law/blob/main/CLAUDE.md",children:"CLAUDE.md"})," - Development guidelines"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var r=s(6540);const i={},t=r.createContext(i);function l(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);