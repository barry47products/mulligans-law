"use strict";(globalThis.webpackChunkdocs_technical=globalThis.webpackChunkdocs_technical||[]).push([[984],{4265:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"testing/strategy","title":"Testing Strategy","description":"Mulligans Law uses Test-Driven Development (TDD) to ensure high code quality, maintainability, and confidence in changes. This guide covers our testing approach, patterns, and best practices.","source":"@site/docs/testing/strategy.md","sourceDirName":"testing","slug":"/testing/strategy","permalink":"/mulligans-law/docs/testing/strategy","draft":false,"unlisted":false,"editUrl":"https://github.com/barry47products/mulligans-law/tree/main/docs-technical/docs/testing/strategy.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Development Workflow","permalink":"/mulligans-law/docs/workflow/development"}}');var r=t(4848),i=t(8453);const a={},o="Testing Strategy",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Test-Driven Development (TDD)",id:"test-driven-development-tdd",level:3},{value:"The Red-Green-Refactor Cycle",id:"the-red-green-refactor-cycle",level:3},{value:"Test Types",id:"test-types",level:2},{value:"Test Pyramid",id:"test-pyramid",level:3},{value:"1. Unit Tests",id:"1-unit-tests",level:3},{value:"<strong>Example: Testing a Use Case</strong>",id:"example-testing-a-use-case",level:4},{value:"2. Widget Tests",id:"2-widget-tests",level:3},{value:"<strong>Example: Testing a Widget</strong>",id:"example-testing-a-widget",level:4},{value:"3. BLoC Tests",id:"3-bloc-tests",level:3},{value:"<strong>Example: Testing a BLoC</strong>",id:"example-testing-a-bloc",level:4},{value:"4. Integration Tests",id:"4-integration-tests",level:3},{value:"<strong>Example: Integration Test</strong>",id:"example-integration-test",level:4},{value:"Mocking Strategy",id:"mocking-strategy",level:2},{value:"Minimal Mocking",id:"minimal-mocking",level:3},{value:"<strong>Example: Proper Mocking</strong>",id:"example-proper-mocking",level:4},{value:"Generating Mocks",id:"generating-mocks",level:3},{value:"Test Helpers",id:"test-helpers",level:2},{value:"Using Test Helpers",id:"using-test-helpers",level:3},{value:"Coverage",id:"coverage",level:2},{value:"Target Coverage",id:"target-coverage",level:3},{value:"Measuring Coverage",id:"measuring-coverage",level:3},{value:"Coverage Exclusions",id:"coverage-exclusions",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Writing Good Tests",id:"writing-good-tests",level:3},{value:"1. Follow AAA Pattern",id:"1-follow-aaa-pattern",level:4},{value:"2. Test One Thing",id:"2-test-one-thing",level:4},{value:"3. Use Descriptive Names",id:"3-use-descriptive-names",level:4},{value:"4. Keep Tests Independent",id:"4-keep-tests-independent",level:4},{value:"5. Test Edge Cases",id:"5-test-edge-cases",level:4},{value:"Continuous Integration",id:"continuous-integration",level:2},{value:"GitHub Actions CI",id:"github-actions-ci",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"testing-strategy",children:"Testing Strategy"})}),"\n",(0,r.jsx)(n.p,{children:"Mulligans Law uses Test-Driven Development (TDD) to ensure high code quality, maintainability, and confidence in changes. This guide covers our testing approach, patterns, and best practices."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.h3,{id:"test-driven-development-tdd",children:"Test-Driven Development (TDD)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Philosophy:"})," Write tests BEFORE writing production code."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Benefits:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 Forces good design (testable code is well-designed code)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Prevents regression bugs"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Serves as living documentation"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Increases confidence in changes"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Reduces debugging time"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Warning:"})," \u274c Writing code first and tests later is NOT TDD!"]}),"\n",(0,r.jsx)(n.h3,{id:"the-red-green-refactor-cycle",children:"The Red-Green-Refactor Cycle"}),"\n",(0,r.jsx)(n.p,{children:"Every feature is built in small TDD cycles:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"\ud83d\udd34 RED \u2192 Write a failing test\n         \u2193\n\ud83d\udfe2 GREEN \u2192 Write minimal code to pass\n          \u2193\n\ud83d\udd35 REFACTOR \u2192 Improve code quality while keeping tests green\n             \u2193\n        (Repeat)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example Cycle (5-15 minutes each):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// \ud83d\udd34 RED: Write failing test\ntest('should calculate net score correctly', () {\n  final calculator = ScoreCalculator();\n  expect(calculator.calculateNet(gross: 5, handicap: 1), 4);\n});\n// Run: flutter test \u2192 \u274c Fails (ScoreCalculator doesn't exist)\n\n// \ud83d\udfe2 GREEN: Make it pass (minimal code)\nclass ScoreCalculator {\n  int calculateNet({required int gross, required int handicap}) {\n    return gross - handicap;\n  }\n}\n// Run: flutter test \u2192 \u2705 Passes\n\n// \ud83d\udd35 REFACTOR: Improve (if needed)\nclass ScoreCalculator {\n  int calculateNet({required int gross, required int handicap}) {\n    if (gross < 0 || handicap < 0) {\n      throw ArgumentError('Scores must be non-negative');\n    }\n    return gross - handicap;\n  }\n}\n// Run: flutter test \u2192 \u2705 Still passes\n"})}),"\n",(0,r.jsx)(n.h2,{id:"test-types",children:"Test Types"}),"\n",(0,r.jsx)(n.h3,{id:"test-pyramid",children:"Test Pyramid"}),"\n",(0,r.jsx)(n.p,{children:"Our testing strategy follows the test pyramid:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"      /\\\n     /  \\  10% Integration Tests (E2E)\n    /____\\\n   /      \\  20% Widget Tests (UI)\n  /________\\\n /          \\\n/____________\\ 70% Unit Tests (Logic)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Distribution:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"70% Unit Tests"})," - Fast, isolated, test business logic"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"20% Widget Tests"})," - Test UI components and interactions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"10% Integration Tests"})," - Test complete user flows"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"1-unit-tests",children:"1. Unit Tests"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Test individual functions, classes, and use cases in isolation."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What to Test:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 Domain entities and value objects"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Use cases (business logic)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Calculators and validators"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Repository implementations"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Data transformations"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What NOT to Test:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u274c Third-party libraries (trust they work)"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Simple getters/setters with no logic"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Data classes with no behavior"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Flutter framework code"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-testing-a-use-case",children:(0,r.jsx)(n.strong,{children:"Example: Testing a Use Case"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// test/features/scores/domain/usecases/submit_score_test.dart\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:mockito/mockito.dart';\nimport 'package:mockito/annotations.dart';\n\nimport 'submit_score_test.mocks.dart';\n\n@GenerateMocks([ScoreRepository])\nvoid main() {\n  late SubmitScoreUseCase useCase;\n  late MockScoreRepository mockRepository;\n\n  setUp(() {\n    mockRepository = MockScoreRepository();\n    useCase = SubmitScoreUseCase(mockRepository);\n  });\n\n  group('SubmitScoreUseCase', () {\n    final testScore = Score(\n      id: 'score-1',\n      roundId: 'round-1',\n      holeScores: List.filled(18, 4),\n    );\n\n    test('should submit complete score successfully', () async {\n      // Arrange\n      when(mockRepository.submitScore(testScore))\n          .thenAnswer((_) async => testScore);\n\n      // Act\n      final result = await useCase(testScore);\n\n      // Assert\n      expect(result, testScore);\n      verify(mockRepository.submitScore(testScore)).called(1);\n    });\n\n    test('should throw IncompleteScoreException when score incomplete', () {\n      // Arrange\n      final incompleteScore = Score(\n        id: 'score-1',\n        roundId: 'round-1',\n        holeScores: [4, 3, 5], // Only 3 holes!\n      );\n\n      // Act & Assert\n      expect(\n        () => useCase(incompleteScore),\n        throwsA(isA<IncompleteScoreException>()),\n      );\n    });\n  });\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Running Unit Tests:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# All unit tests\nflutter test\n\n# Specific test file\nflutter test test/features/scores/domain/usecases/submit_score_test.dart\n\n# Tests matching pattern\nflutter test --name "SubmitScore"\n\n# With coverage\nflutter test --coverage\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-widget-tests",children:"2. Widget Tests"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Test UI components and user interactions."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What to Test:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 Widgets render correctly"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 User interactions (taps, swipes, input)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Widget responds to state changes"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Navigation flows"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Form validation"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What NOT to Test:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u274c Static layouts without logic"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Third-party widgets"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Pixel-perfect rendering"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-testing-a-widget",children:(0,r.jsx)(n.strong,{children:"Example: Testing a Widget"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// test/features/scores/presentation/widgets/score_card_test.dart\nimport 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\nvoid main() {\n  group('ScoreCard Widget', () {\n    testWidgets('displays hole information correctly', (tester) async {\n      // Arrange & Act\n      await tester.pumpWidget(\n        MaterialApp(\n          home: Scaffold(\n            body: ScoreCard(\n              hole: 1,\n              par: 4,\n              strokeIndex: 10,\n              score: 5,\n              onScoreChanged: (_) {},\n            ),\n          ),\n        ),\n      );\n\n      // Assert\n      expect(find.text('Hole 1'), findsOneWidget);\n      expect(find.text('Par 4'), findsOneWidget);\n      expect(find.text('SI 10'), findsOneWidget);\n      expect(find.text('5'), findsOneWidget);\n    });\n\n    testWidgets('calls onScoreChanged when score button tapped', (tester) async {\n      // Arrange\n      int? capturedScore;\n      await tester.pumpWidget(\n        MaterialApp(\n          home: Scaffold(\n            body: ScoreCard(\n              hole: 1,\n              par: 4,\n              strokeIndex: 10,\n              score: 0,\n              onScoreChanged: (score) => capturedScore = score,\n            ),\n          ),\n        ),\n      );\n\n      // Act\n      await tester.tap(find.text('4'));\n      await tester.pump();\n\n      // Assert\n      expect(capturedScore, 4);\n    });\n\n    testWidgets('highlights current score', (tester) async {\n      // Arrange & Act\n      await tester.pumpWidget(\n        MaterialApp(\n          home: Scaffold(\n            body: ScoreCard(\n              hole: 1,\n              par: 4,\n              strokeIndex: 10,\n              score: 5,\n              onScoreChanged: (_) {},\n            ),\n          ),\n        ),\n      );\n\n      // Assert\n      final scoreButton = tester.widget<ElevatedButton>(\n        find.widgetWithText(ElevatedButton, '5'),\n      );\n      expect(scoreButton.style?.backgroundColor?.resolve({}), isNotNull);\n    });\n  });\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Running Widget Tests:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# All widget tests\nflutter test test/**/widgets/\n\n# Specific widget\nflutter test test/features/scores/presentation/widgets/score_card_test.dart\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-bloc-tests",children:"3. BLoC Tests"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Test state management logic using bloc_test package."]}),"\n",(0,r.jsx)(n.h4,{id:"example-testing-a-bloc",children:(0,r.jsx)(n.strong,{children:"Example: Testing a BLoC"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// test/features/scores/presentation/bloc/score_capture_bloc_test.dart\nimport 'package:bloc_test/bloc_test.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:mockito/mockito.dart';\n\nvoid main() {\n  late ScoreCaptureBloc bloc;\n  late MockGetRoundUseCase mockGetRound;\n  late MockSubmitScoreUseCase mockSubmitScore;\n\n  setUp(() {\n    mockGetRound = MockGetRoundUseCase();\n    mockSubmitScore = MockSubmitScoreUseCase();\n    bloc = ScoreCaptureBloc(\n      getRound: mockGetRound,\n      submitScore: mockSubmitScore,\n    );\n  });\n\n  group('LoadRound', () {\n    final testRound = Round(\n      id: 'round-1',\n      course: testCourse,\n      date: DateTime.now(),\n    );\n\n    blocTest<ScoreCaptureBloc, ScoreCaptureState>(\n      'emits [Loading, Loaded] when LoadRound succeeds',\n      build: () {\n        when(mockGetRound('round-1'))\n            .thenAnswer((_) async => testRound);\n        return bloc;\n      },\n      act: (bloc) => bloc.add(LoadRound('round-1')),\n      expect: () => [\n        ScoreCaptureLoading(),\n        ScoreCaptureLoaded(round: testRound, currentHole: 0),\n      ],\n    );\n\n    blocTest<ScoreCaptureBloc, ScoreCaptureState>(\n      'emits [Loading, Error] when LoadRound fails',\n      build: () {\n        when(mockGetRound('round-1'))\n            .thenThrow(RoundNotFoundException());\n        return bloc;\n      },\n      act: (bloc) => bloc.add(LoadRound('round-1')),\n      expect: () => [\n        ScoreCaptureLoading(),\n        ScoreCaptureError('Round not found'),\n      ],\n    );\n  });\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-integration-tests",children:"4. Integration Tests"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Test complete user flows end-to-end."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"When to Use:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Critical user journeys (login \u2192 create round \u2192 submit score)"}),"\n",(0,r.jsx)(n.li,{children:"Cross-feature flows"}),"\n",(0,r.jsx)(n.li,{children:"Smoke tests for major functionality"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-integration-test",children:(0,r.jsx)(n.strong,{children:"Example: Integration Test"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// integration_test/score_capture_flow_test.dart\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:integration_test/integration_test.dart';\n\nvoid main() {\n  IntegrationTestWidgetsFlutterBinding.ensureInitialized();\n\n  group('Score Capture Flow', () {\n    testWidgets('complete score capture journey', (tester) async {\n      // Start app\n      await tester.pumpWidget(MyApp());\n      await tester.pumpAndSettle();\n\n      // 1. Login\n      await tester.enterText(find.byKey(Key('email')), 'test@example.com');\n      await tester.enterText(find.byKey(Key('password')), 'password123');\n      await tester.tap(find.byKey(Key('login-button')));\n      await tester.pumpAndSettle();\n\n      // 2. Navigate to rounds\n      await tester.tap(find.text('Rounds'));\n      await tester.pumpAndSettle();\n\n      // 3. Select a round\n      await tester.tap(find.text('Sunday Medal'));\n      await tester.pumpAndSettle();\n\n      // 4. Enter scores for 18 holes\n      for (int hole = 1; hole <= 18; hole++) {\n        await tester.tap(find.text('4')); // Par for each hole\n        if (hole < 18) {\n          await tester.drag(\n            find.byType(PageView),\n            Offset(-400, 0), // Swipe left\n          );\n          await tester.pumpAndSettle();\n        }\n      }\n\n      // 5. Submit score\n      await tester.tap(find.text('Submit'));\n      await tester.pumpAndSettle();\n\n      // 6. Verify success\n      expect(find.text('Score submitted!'), findsOneWidget);\n    });\n  });\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Running Integration Tests:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# On device/emulator\nflutter test integration_test/\n\n# With specific device\nflutter test integration_test/ -d <device-id>\n"})}),"\n",(0,r.jsx)(n.h2,{id:"mocking-strategy",children:"Mocking Strategy"}),"\n",(0,r.jsx)(n.h3,{id:"minimal-mocking",children:"Minimal Mocking"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Rule:"})," Only mock external dependencies, use real objects for everything else."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Do Mock:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 External APIs (Supabase client)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Local database (Drift)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Repositories (in use case tests)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Use cases (in BLoC tests)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Complex services"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Don't Mock:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u274c Domain entities"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Value objects"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Data classes"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Simple DTOs"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-proper-mocking",children:(0,r.jsx)(n.strong,{children:"Example: Proper Mocking"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// \u2705 GOOD: Mock repository (external dependency)\n@GenerateMocks([ScoreRepository])\nvoid main() {\n  late MockScoreRepository mockRepository;\n  late SubmitScoreUseCase useCase;\n\n  setUp(() {\n    mockRepository = MockScoreRepository();\n    useCase = SubmitScoreUseCase(mockRepository);\n  });\n\n  test('should submit score', () async {\n    // Use real Score object\n    final score = Score(\n      id: 'score-1',\n      roundId: 'round-1',\n      holeScores: List.filled(18, 4),\n    );\n\n    when(mockRepository.submitScore(score))\n        .thenAnswer((_) async => score);\n\n    await useCase(score);\n\n    verify(mockRepository.submitScore(score)).called(1);\n  });\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// \u274c BAD: Mock domain entity (unnecessary)\n@GenerateMocks([Score])\nvoid main() {\n  test('should calculate total', () {\n    final mockScore = MockScore();\n    when(mockScore.calculateTotal()).thenReturn(72);\n\n    // This is pointless - just use a real Score!\n    final total = mockScore.calculateTotal();\n    expect(total, 72);\n  });\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"generating-mocks",children:"Generating Mocks"}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"mockito"})," to generate mocks:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// Add annotation above test\n@GenerateMocks([ScoreRepository, RoundRepository])\nimport 'my_test.mocks.dart';\n\nvoid main() {\n  // Mocks available: MockScoreRepository, MockRoundRepository\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Generate mocks:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"flutter pub run build_runner build\n"})}),"\n",(0,r.jsx)(n.h2,{id:"test-helpers",children:"Test Helpers"}),"\n",(0,r.jsx)(n.h3,{id:"using-test-helpers",children:"Using Test Helpers"}),"\n",(0,r.jsxs)(n.p,{children:["The project includes helper utilities in ",(0,r.jsx)(n.code,{children:"test/helpers/"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"test_helper.dart"})," - Widget testing utilities:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"import 'package:test/helpers/test_helper.dart';\n\ntestWidgets('my widget test', (tester) async {\n  // Helper to pump widget with MaterialApp\n  await pumpTestWidget(tester, MyWidget());\n\n  // Helper assertions\n  verifyWidgetExists('Welcome');\n  verifyWidgetNotExists('Error');\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"mock_factories.dart"})," - Test data generators:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"import 'package:test/helpers/mock_factories.dart';\n\ntest('my test', () {\n  // Create test data easily\n  final score = createTestScore(\n    id: 'score-1',\n    totalStableford: 36,\n  );\n\n  final member = createTestMember(\n    handicap: 18,\n    role: 'CAPTAIN',\n  );\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"coverage",children:"Coverage"}),"\n",(0,r.jsx)(n.h3,{id:"target-coverage",children:"Target Coverage"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Overall:"})," 70% minimum"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"By Layer:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Domain:"})," 90%+ (critical business logic)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data:"})," 70%+ (repository implementations)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Presentation:"})," 60%+ (BLoCs and important widgets)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"measuring-coverage",children:"Measuring Coverage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Generate coverage\nflutter test --coverage\n\n# View coverage HTML report (requires lcov)\ngenhtml coverage/lcov.info -o coverage/html\nopen coverage/html/index.html\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"CI Integration:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Coverage automatically uploaded to Codecov"}),"\n",(0,r.jsx)(n.li,{children:"Coverage trends tracked over time"}),"\n",(0,r.jsx)(n.li,{children:"PRs show coverage changes"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"coverage-exclusions",children:"Coverage Exclusions"}),"\n",(0,r.jsx)(n.p,{children:"Files excluded from coverage:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// coverage:ignore-file - Entire file\n// coverage:ignore-start / coverage:ignore-end - Block\n// coverage:ignore-line - Single line\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Auto-excluded:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**/*.g.dart"})," (generated files)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**/*.freezed.dart"})," (generated files)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"main.dart"})," (app entry point)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"writing-good-tests",children:"Writing Good Tests"}),"\n",(0,r.jsx)(n.h4,{id:"1-follow-aaa-pattern",children:"1. Follow AAA Pattern"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arrange-Act-Assert:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"test('should calculate stableford points correctly', () {\n  // Arrange - Set up test data and dependencies\n  final calculator = StablefordCalculator();\n  final netScore = 4;\n  final par = 4;\n\n  // Act - Execute the code being tested\n  final points = calculator.calculate(netScore: netScore, par: par);\n\n  // Assert - Verify the result\n  expect(points, 2);\n});\n"})}),"\n",(0,r.jsx)(n.h4,{id:"2-test-one-thing",children:"2. Test One Thing"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Each test should verify one behavior:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// \u2705 GOOD: Tests one thing\ntest('should calculate stableford points for par', () {\n  final points = calculator.calculate(netScore: 4, par: 4);\n  expect(points, 2);\n});\n\ntest('should calculate stableford points for birdie', () {\n  final points = calculator.calculate(netScore: 3, par: 4);\n  expect(points, 3);\n});\n\n// \u274c BAD: Tests multiple things\ntest('should calculate stableford points', () {\n  expect(calculator.calculate(netScore: 4, par: 4), 2); // Par\n  expect(calculator.calculate(netScore: 3, par: 4), 3); // Birdie\n  expect(calculator.calculate(netScore: 5, par: 4), 1); // Bogey\n  // Too much in one test!\n});\n"})}),"\n",(0,r.jsx)(n.h4,{id:"3-use-descriptive-names",children:"3. Use Descriptive Names"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Test names should describe the behavior:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// \u2705 GOOD: Clear what's being tested\ntest('should throw ValidationException when handicap is negative', () {\n  // ...\n});\n\ntest('should calculate net score by subtracting handicap strokes', () {\n  // ...\n});\n\n// \u274c BAD: Vague names\ntest('handicap test', () {\n  // ...\n});\n\ntest('test calculation', () {\n  // ...\n});\n"})}),"\n",(0,r.jsx)(n.h4,{id:"4-keep-tests-independent",children:"4. Keep Tests Independent"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Tests should not depend on each other:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// \u2705 GOOD: Each test sets up its own data\ntest('test A', () {\n  final score = Score(holeScores: [4, 3, 5]);\n  // ...\n});\n\ntest('test B', () {\n  final score = Score(holeScores: [4, 4, 4]);\n  // ...\n});\n\n// \u274c BAD: Tests share mutable state\nScore? sharedScore;\n\ntest('test A', () {\n  sharedScore = Score(holeScores: [4, 3, 5]);\n  // ...\n});\n\ntest('test B', () {\n  sharedScore!.holeScores[0] = 3; // Modifies shared state!\n  // ...\n});\n"})}),"\n",(0,r.jsx)(n.h4,{id:"5-test-edge-cases",children:"5. Test Edge Cases"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Don't just test the happy path:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"group('StablefordCalculator', () {\n  test('should calculate points for par', () {\n    expect(calculator.calculate(netScore: 4, par: 4), 2);\n  });\n\n  test('should calculate points for albatross', () {\n    expect(calculator.calculate(netScore: 2, par: 5), 5);\n  });\n\n  test('should return 0 points for double bogey or worse', () {\n    expect(calculator.calculate(netScore: 6, par: 4), 0);\n    expect(calculator.calculate(netScore: 7, par: 4), 0);\n  });\n\n  test('should handle negative scores gracefully', () {\n    expect(\n      () => calculator.calculate(netScore: -1, par: 4),\n      throwsA(isA<ArgumentError>()),\n    );\n  });\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"continuous-integration",children:"Continuous Integration"}),"\n",(0,r.jsx)(n.h3,{id:"github-actions-ci",children:"GitHub Actions CI"}),"\n",(0,r.jsx)(n.p,{children:"Every push triggers automated testing:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"- name: Run tests\n  run: flutter test --coverage\n\n- name: Upload coverage\n  uses: codecov/codecov-action@v5\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"CI Requirements:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 All tests must pass"}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 Code must be formatted (",(0,r.jsx)(n.code,{children:"dart format"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 No analysis errors (",(0,r.jsx)(n.code,{children:"flutter analyze"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Builds must succeed (iOS & Android)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pull requests cannot merge until CI passes."})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/mulligans-law/docs/workflow/development",children:"Development Workflow"})," - Learn the TDD process"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/mulligans-law/docs/architecture/overview",children:"Architecture Overview"})," - Understand the structure"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/mulligans-law/docs/getting-started/installation",children:"Getting Started"})," - Set up your environment"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);