name: CD

on:
  push:
    branches: [ main ]

# Required permissions for semantic-release
permissions:
  contents: write  # To create releases and push tags
  issues: write    # To create issues on failure
  pull-requests: write  # To comment on PRs

jobs:
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    permissions:
      contents: write  # To create releases and push tags
      issues: write    # To create issues on failure
      pull-requests: write  # To comment on PRs
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          semantic_version: 25
          extra_plugins: |
            @semantic-release/changelog@6.0.3
            @semantic-release/git@10.0.1
            conventional-changelog-conventionalcommits@9.1.0

  # Disabled to save GitHub Actions minutes during development
  # Uncomment when ready for deployment
  # deploy-ios:
  #   name: Deploy iOS to TestFlight
  #   needs: semantic-release
  #   if: needs.semantic-release.outputs.new_release_published == 'true'
  #   runs-on: macos-latest
  #   permissions:
  #     contents: read  # To checkout code
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v5
  #
  #     - name: Set up Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: '3.35.6'
  #         channel: 'stable'
  #         cache: true
  #
  #     - name: Install dependencies
  #       run: flutter pub get
  #
  #     - name: Update version
  #       run: |
  #         VERSION=${{ needs.semantic-release.outputs.new_release_version }}
  #         # Update pubspec.yaml version
  #         sed -i '' "s/^version: .*/version: $VERSION+${{ github.run_number }}/" pubspec.yaml
  #         echo "Updated version to $VERSION+${{ github.run_number }}"
  #
  #     - name: Build iOS release
  #       run: flutter build ios --release --no-codesign
  #
  #     # TODO: Add actual TestFlight deployment when ready
  #     # This requires:
  #     # 1. Apple Developer account
  #     # 2. App Store Connect API key
  #     # 3. Provisioning profiles and certificates
  #     # 4. Configure secrets: APP_STORE_CONNECT_KEY_ID, APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_API_KEY
  #
  #     - name: TestFlight Upload (Placeholder)
  #       run: |
  #         echo "ðŸš€ iOS build complete: Version ${{ needs.semantic-release.outputs.new_release_version }}"
  #         echo "ðŸ“¦ Build artifact: build/ios/iphoneos/Runner.app"
  #         echo ""
  #         echo "To enable TestFlight deployment:"
  #         echo "1. Set up Apple Developer account"
  #         echo "2. Create App Store Connect API key"
  #         echo "3. Add secrets to GitHub repository"
  #         echo "4. Configure Fastlane for automated uploads"
  #         echo ""
  #         echo "See docs/DEPLOYMENT.md for detailed setup instructions"
  #
  # deploy-android:
  #   name: Deploy Android to Play Store
  #   needs: semantic-release
  #   if: needs.semantic-release.outputs.new_release_published == 'true'
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read  # To checkout code
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v5
  #
  #     - name: Set up Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: '3.35.6'
  #         channel: 'stable'
  #         cache: true
  #
  #     - name: Set up Java
  #       uses: actions/setup-java@v5
  #       with:
  #         distribution: 'temurin'
  #         java-version: '21'
  #         cache: 'gradle'
  #
  #     - name: Install dependencies
  #       run: flutter pub get
  #
  #     - name: Update version
  #       run: |
  #         VERSION=${{ needs.semantic-release.outputs.new_release_version }}
  #         # Update pubspec.yaml version
  #         sed -i "s/^version: .*/version: $VERSION+${{ github.run_number }}/" pubspec.yaml
  #         echo "Updated version to $VERSION+${{ github.run_number }}"
  #
  #     - name: Build Android App Bundle
  #       run: flutter build appbundle --release
  #
  #     # TODO: Add actual Play Store deployment when ready
  #     # This requires:
  #     # 1. Google Play Console account
  #     # 2. Service account JSON key
  #     # 3. Signing keystore
  #     # 4. Configure secrets: PLAY_STORE_SERVICE_ACCOUNT_JSON, ANDROID_KEYSTORE, KEYSTORE_PASSWORD
  #
  #     - name: Play Store Upload (Placeholder)
  #       run: |
  #         echo "ðŸš€ Android build complete: Version ${{ needs.semantic-release.outputs.new_release_version }}"
  #         echo "ðŸ“¦ Build artifact: build/app/outputs/bundle/release/app-release.aab"
  #         echo ""
  #         echo "To enable Play Store deployment:"
  #         echo "1. Set up Google Play Console account"
  #         echo "2. Create service account and download JSON key"
  #         echo "3. Generate signing keystore"
  #         echo "4. Add secrets to GitHub repository"
  #         echo "5. Configure Fastlane for automated uploads"
  #         echo ""
  #         echo "See docs/DEPLOYMENT.md for detailed setup instructions"
  #
  #     - name: Upload Android artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: android-release-${{ needs.semantic-release.outputs.new_release_version }}
  #         path: build/app/outputs/bundle/release/app-release.aab
  #         retention-days: 30
